[
  {
    "Id": "1127819",
    "ThreadId": "470808",
    "Html": "Hello,\r<br />\n<br />\nWe love this plugin but we have to modify it so we can have a multiplier on the backing field.<br />\n\r<br />\neg: This allows us to for example to show a rating of 1.5 but submit a value of 15.\r<br />\n<br />\n$(function () { $(&quot;#bitter&quot;).rateit({backingfld: &quot;#ratingfield&quot;, max: 5, multiplier: 10, step: 0.5, value: 1.5 }); }); \r<br />\n<br />\nIt would be gread if this could be added as an additional option.\r<br />\n<br />\nHere is an eclipse patch for what we are using.  I can post the complete source if needed.\r<br />\n<br />\nCheers Greg.<br />\n<h3>Eclipse Workspace Patch 1.0</h3>\n<h1>P Events</h1>\n<h1>Index: src/main/webapp/events-ui/scripts/rateit-1.0.15/src/jquery.rateit.js</h1>\n--- src/main/webapp/events-ui/scripts/rateit-1.0.15/src/jquery.rateit.js\t(revision 1883)\r<br />\n+++ src/main/webapp/events-ui/scripts/rateit-1.0.15/src/jquery.rateit.js\t(working copy)\r<br />\n@@ -1,5 +1,6 @@\r<br />\n /*! RateIt | v1.0.15 / 11/13/2013 | <a href=\"https://rateit.codeplex.com/license\" rel=\"nofollow\">https://rateit.codeplex.com/license</a><br />\n<pre><code> http://rateit.codeplex.com | Twitter: @gjunge</code></pre>\n\n<ul>\n<li>\nGA Added multiplier\r<br />\n */\r<br />\n (function ($) {<br />\n $.rateit = {<br />\n@@ -108,6 +109,7 @@\n<pre><code>         itemdata('min', itemdata('min') || options.min);\n         itemdata('max', itemdata('max') || options.max);\n         itemdata('step', itemdata('step') || options.step);</code></pre>\n\n</li>\n<li>\nitemdata('multiplier', itemdata('multiplier') || options.multiplier);  // +\n<pre><code>         itemdata('readonly', itemdata('readonly') !== undefined ? itemdata('readonly') : options.readonly);\n         itemdata('resetable', itemdata('resetable') !== undefined ? itemdata('resetable') : options.resetable);\n         itemdata('backingfld', itemdata('backingfld') || options.backingfld);</code></pre>\n\n@@ -121,7 +123,7 @@\n<pre><code>         if (itemdata('backingfld')) {\n             //if we have a backing field, hide it, and get its value, and override defaults if range.\n             var fld = $(itemdata('backingfld'));</code></pre>\n\n</li>\n<li>itemdata('value', fld.hide().val());</li>\n<li>\nitemdata('value', fld.hide().val() / itemdata('multiplier')); // <br />\n<pre><code>             if (fld.attr('disabled') || fld.attr('readonly')) \n                 itemdata('readonly', true); //http://rateit.codeplex.com/discussions/362055 , if a backing field is disabled or readonly at instantiation, make rateit readonly.</code></pre>\n\n@@ -133,6 +135,7 @@<br />\n<pre><code>                     itemdata('min', parseInt(fld.attr('min')) || itemdata('min')); //if we would have done fld[0].min it wouldn't have worked in browsers not supporting the range type.\n                     itemdata('max', parseInt(fld.attr('max')) || itemdata('max'));\n                     itemdata('step', parseInt(fld.attr('step')) || itemdata('step'));</code></pre>\n\n</li>\n<li>\nitemdata('multiplier', parseInt(fld.attr('multiplier')) || itemdata('multiplier')); // +\n<pre><code>                 }\n             }\n             if (fld[0].nodeName == 'SELECT' &amp;&amp; fld[0].options.length &gt; 1) {</code></pre>\n\n@@ -139,6 +142,7 @@\n<pre><code>                 itemdata('min', Number(fld[0].options[0].value));\n                 itemdata('max', Number(fld[0].options[fld[0].length - 1].value));\n                 itemdata('step', Number(fld[0].options[1].value) - Number(fld[0].options[0].value));</code></pre>\n\n</li>\n<li>\nitemdata('multiplier', Number(fld[0].options[1].value)); // +<br />\n<pre><code>             }\n         }\n</code></pre>\n\n</li>\n</ul>\n@@ -217,7 +221,7 @@<br />\n<pre><code>         var setSelection = function (value) {\n             itemdata('value', value);\n             if (itemdata('backingfld')) {</code></pre>\n\n<ul>\n<li>$(itemdata('backingfld')).val(value);</li>\n<li>\n$(itemdata('backingfld')).val(value * itemdata('multiplier')); // <br />\n<pre><code>         }\n         if (itemdata('ispreset')) { //if it was a preset value, unset that.\n             range.find('.rateit-selected').removeClass(presetclass);</code></pre>\n\n@@ -302,7 +306,7 @@<br />\n };<br />\n<br />\n //some default values.<br />\n</li>\n<li>$.fn.rateit.defaults = { min: 0, max: 5, step: 0.5, starwidth: 16, starheight: 16, readonly: false, resetable: true, ispreset: false};</li>\n<li>\n$.fn.rateit.defaults = { min: 0, max: 5, step: 0.5, multiplier: 1.0, starwidth: 16, starheight: 16, readonly: false, resetable: true, ispreset: false}; // <br />\n<br />\n //invoke it on all .rateit elements. This could be removed if not wanted.<br />\n $(function () { $('div.rateit, span.rateit').rateit(); });<br />\n</li>\n</ul>\n",
    "PostedDate": "2013-11-22T01:14:58.6-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1128316",
    "ThreadId": "470808",
    "Html": "Hi Greg,\r<br />\n<br />\nI understand your requirement (actually I have the same requirement on my website). \r<br />\nAt the moment I'm a bit hesitant of adding it to RateIt:<br />\n<ul>\n<li>I do not want a feature overkill. </li>\n<li>I try to keep on par with the default controls (for example the normal range control, doesn't contain a feature like this)</li>\n<li>\nI think that this is the job of the server side code. The server should transform any value so that the UI can use it. Much like a server would save a date in its own value, yet output it as ISO format so that the date control can use it.<br />\n</li>\n</ul>\nregards,\r<br />\nGidon<br />\n",
    "PostedDate": "2013-11-23T23:22:50.013-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]